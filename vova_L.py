# Алгоритм получает на вход натуральное число N>1 и строит
# по нему новое число R следующим образом:
# 
# 1. Строится двоичная запись числа N.
# 2. Вычисляется количество единиц, стоящих на чётных местах в
# двоичной записи числа N без ведущих нулей, и количество нулей,
# стоящих на нечётных местах. Места отсчитываются слева направо
# (от старших разрядов к младшим, начиная с единицы).
# 3. Результатом работы алгоритма становится модуль разности полученных двух чисел.
# 
# Пример. Дано число N=39. Алгоритм работает следующим образом:
# 1.Строится двоичная запись: 3910=1001112.
# 2.Выделяем единицы на чётных и нули на нечётных местах: 100111.
# На чётных местах стоят две единицы, на нечётных— один ноль.
# 3.Модуль разности равен 1.
# Результат работы алгоритма R=1.
# При каком наименьшем N в результате работы алгоритма получится
# R=4?

# def f(n):
#     r = bin(n)[2:]
#     cnt_1 = 0
#     cnt_0 = 0
#     for i in range(0, len(r), 2):
#         if r[i] == "0":
#             cnt_0 += 1
#     for i in range(1, len(r), 2):
#         if r[i] == "1":
#             cnt_1 += 1
#
#     return abs(cnt_1 - cnt_0)
#
#
# for i in range(1, 10000):
#     if f(i) == 4:
#         print(i)
#         break

# def f(n):
#     r = bin(n)[2:]
#     r += str(r.count("1") % 2)
#     r += str(r.count("1") % 2)
#     return int(r, 2)
#
#
# for i in range(1, 10000):
#     if f(i) > 43:
#         print(f(i))
#         break

# and, or, xor, ==, -->
# и      and
# но      and                   А(у квадрата 4 стороны,) но Б(у треугольника две стороны) = ложь
# хотя бы      or
# только одно      xor
# если ... то     -->
# тогда и только тогда когда     ==
# а      and
# либо... либо...     xor

# xor - исключающеее ИЛИ
# A B F
# 0 0 0
# 0 1 1
# 1 0 1
# 1 1 0


# file = open("data.txt")
# data = [int(i) for i in file]  # -67, -694, 835, 786, -457, 495, -699, -592, -405, -745, 656
# file.close()
#
# cnt = 0  # cnt - count
# mx = 0
# for i in range(len(data) - 1):
#     if data[i] % 3 == 0 or data[i + 1] % 3 == 0:
#         cnt += 1
#         mx = max(mx, data[i] + data[i + 1])
#
# print(cnt, mx)

file = open("data.txt")
data = [int(i) for i in file]  # 5500, 6971, 3572, 7600, 2822, 5687, 9741, 8623, 7954, 1029, 9913, 380, 7965, 3679,
file.close()

d = 160
p = 7

cnt = 0
mx = 0

for i in range(len(data) - 1):
    for j in range(i + 1, len(data)):
        if data[i] % d != data[j] % d and (data[i] % p == 0 or data[j] % p == 0):
            cnt += 1
            mx = max(mx, data[i] + data[j])

print(cnt, mx)
